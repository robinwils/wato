name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.os == 'ubuntu-24.04' && 'robinwils/wato-build-ubuntu-24.04' || null }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2022]
        buildtype: [debug, release]
        include:
          - os: ubuntu-24.04
            compiler: gcc
            preset: unixlike
          - os: macos-15
            compiler: clang
            preset: unixlike
          - os: windows-2022
            compiler: msvc
            preset: windows
    defaults:
      run:
        shell: bash
    env:
      CMAKE_PRESET: ${{ matrix.preset }}-${{ matrix.compiler }}-${{ matrix.buildtype }}

    steps:
      - name: Mark repo as safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Get nb cores (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "CORES=$(sysctl -n hw.physicalcpu)" >> $GITHUB_ENV

      - name: Get nb cores (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "CORES=$(nproc)" >> $GITHUB_ENV

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run:
          # for libsodium
          brew install autoconf automake libtool

      - name: Prepare Vulkan SDK
        if: runner.os == 'windows'
        uses: jakoch/install-vulkan-sdk-action@v1
        with:
          # debian testing version for now
          vulkan_version: 1.3.243.0
          cache: true
          install_runtime: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
        with:
          # debian testing version as of 28/06/2025
          cmakeVersion: 3.31.6

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      # As stated in the readme: Supports Windows. Does nothing on Linux and macOS.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset ${{ env.CMAKE_PRESET }} .

      - name: Build
        if: runner.os == 'Windows'
        run: |
          cmake --build out/build/${{ env.CMAKE_PRESET }}

      - name: Build
        if: runner.os != 'Windows'
        run: |
          cmake --build out/build/${{ env.CMAKE_PRESET }} -j ${{ env.CORES }} -v

       # Test the whole project with CTest, again Release configuration only.
      - name: Test
        run: |
          ctest
